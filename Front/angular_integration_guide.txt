Angular: Cómo usar HeaderComponent y FooterComponent (Standalone)

1) index.html (no incluye header/footer; solo el root de Angular)
---------------------------------------------------------------
Ruta típica: src/index.html

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <title>DeciWeb</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <base href="/" />
</head>
<body>
  <app-root></app-root>
</body>
</html>

2) AppComponent (plantilla base con header, router y footer)
----------------------------------------------------------
- Usa los componentes Standalone que ya tienes en carpeta angular/
- Coloca el header arriba, el footer abajo y el router en medio.
- El CSS asegura que el footer quede al fondo con poco contenido.

// src/app/app.component.ts
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
// Importa tus componentes Standalone
import { HeaderComponent } from '../path-to/angular/header'; // ajusta la ruta real
import { FooterComponent } from '../path-to/angular/footer'; // ajusta la ruta real

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet, HeaderComponent, FooterComponent],
  template: `
    <div class="app-shell">
      <app-header></app-header>
      <main class="app-content">
        <router-outlet></router-outlet>
      </main>
      <app-footer></app-footer>
    </div>
  `,
  styles: [`
    :host, .app-shell { display: block; min-height: 100vh; }
    .app-shell { display: flex; flex-direction: column; }
    .app-content { flex: 1; }
  `]
})
export class AppComponent {}

3) Rutas (ejemplo) para que funcionen los routerLink del header
---------------------------------------------------------------
// src/app/app.routes.ts
import { Routes } from '@angular/router';
import { Component } from '@angular/core';

@Component({ standalone: true, template: `<h1>Inicio</h1>` })
class InicioPage {}
@Component({ standalone: true, template: `<h1>Análisis</h1>` })
class AnalisisPage {}
@Component({ standalone: true, template: `<h1>Decisiones</h1>` })
class DecisionesPage {}
@Component({ standalone: true, template: `<h1>Reportes</h1>` })
class ReportesPage {}
@Component({ standalone: true, template: `<h1>Configuración</h1>` })
class ConfiguracionPage {}

export const routes: Routes = [
  { path: '', pathMatch: 'full', redirectTo: 'inicio' },
  { path: 'inicio', component: InicioPage },
  { path: 'analisis', component: AnalisisPage },
  { path: 'decisiones', component: DecisionesPage },
  { path: 'reportes', component: ReportesPage },
  { path: 'configuracion', component: ConfiguracionPage },
  { path: '**', redirectTo: 'inicio' }
];

4) Bootstrap de la app (Standalone)
-----------------------------------
// src/main.ts
import { bootstrapApplication } from '@angular/platform-browser';
import { provideRouter } from '@angular/router';
import { routes } from './app/app.routes';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, {
  providers: [provideRouter(routes)]
}).catch(err => console.error(err));

5) Componentes Standalone que ya tienes (no crear otros)
-------------------------------------------------------
- angular/header.html, angular/header.css, angular/header.ts
  - Navbar con routerLink a: /inicio, /analisis, /decisiones, /reportes, /configuracion
  - Modal de login/registro (tabs + animaciones + validaciones)
  - Menú de usuario (toggle + cerrar al hacer click afuera)
  - Efecto scrolled en header al hacer scroll
  - Standalone: importa CommonModule, RouterModule, ReactiveFormsModule
  - Logo en header.html: assets/logotest.jpg (ajusta la ruta si usas otra)
  - Nota: si quieres ocultar brand text, ya está removido en la versión actual.

- angular/footer.html, angular/footer.css, angular/footer.ts
  - Texto: © {{ year }} DeciWeb. Todos los derechos reservados.
  - year se resuelve en footer.ts
  - Standalone: importa CommonModule

6) Requisitos en tu proyecto Angular
------------------------------------
- Tener definidas las rutas usadas por el header (punto 3).
- Asegurar que el asset del logo exista (p.ej. src/assets/logotest.jpg) o cambiar la ruta en header.html.
- No necesitas <link rel="stylesheet"> en header.html/footer.html; Angular aplica styleUrls automáticamente desde el componente TS.

7) Footer pegado abajo (layout del app)
---------------------------------------
- El footer se mantendrá al fondo si el layout principal usa flex:
  - Contenedor raíz con: min-height: 100vh; display: flex; flex-direction: column;
  - Zona de contenido con: flex: 1;

8) Uso
------
- En tu AppComponent (o layout), coloca los selectores:
  <app-header></app-header>
  <router-outlet></router-outlet>
  <app-footer></app-footer>

Con esto, podrás reutilizar la plantilla para todas tus ventanas. Ajusta rutas y el path a header/footer según dónde ubiques los archivos dentro de tu proyecto.
